给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。

示例 1:

输入: "abcabcbb"
输出: 3 
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。
示例 2:

输入: "bbbbb"
输出: 1
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。
示例 3:

输入: "pwwkew"
输出: 3
解释: 因为无重复字符的最长子串是 "wke"，所以其长度为 3。
     请注意，你的答案必须是 子串 的长度，"pwke" 是一个子序列，不是子串。




解法1 : 双for的暴力解法
public static int LengthOfLongestSubstring(string s)
        {
            int num = 0;
            List<char> temp = new List<char>();
            for (int j = 0; j < s.Length; j++)
            {
                temp.Clear();
                for (int i = j; i < s.Length; i++)
                {
                    if (temp.Contains(s[i]))
                    {
                        break;
                    }
                    else
                    {
                        temp.Add(s[i]);
                    }
                }
                num = temp.Count > num ? temp.Count : num;
            }
            return num;
       }
       
       
       
       
解法2 : 一个for循环遍历
遍历,遇到重复的就删除之前的全部 (从头删至重复前一位位置)
比如  a,b,c,b,d,e  遍历到第二个b时  发现重复了    就删除之前的所有(不包含当前重复的字母b)ls.RemoveRange(0, 2)


public static int LengthOfLongestSubstring(string s)
        {
        List<char> ls = new List<char>();

            int n = s.Length;

            int intMaxLength = 0;

            for (int i = 0; i < n; i++)
            {
                if (ls.Contains(s[i]))
                {
                    int count = ls.IndexOf(s[i]) + 1;
                    ls.RemoveRange(0, count);
                }

                ls.Add(s[i]);
                intMaxLength = ls.Count > intMaxLength ? ls.Count : intMaxLength;
            }

            return intMaxLength;
        }
