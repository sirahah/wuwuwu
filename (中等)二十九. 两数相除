给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。

返回被除数 dividend 除以除数 divisor 得到的商。

示例 1:

输入: dividend = 10, divisor = 3
输出: 3
示例 2:

输入: dividend = 7, divisor = -3
输出: -2
说明:

被除数和除数均为 32 位有符号整数。
除数不为 0。
假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 2^31 − 1。



注意:  会如果只是用 -=   特殊例子会出现超时的情况

    所以要将除数扩大倍数
                while (tempDivisor <= newdividend)
                {
                    newdividend -= tempDivisor;
                    res += count;
                    count++;
                    tempDivisor = newdivisor * count;
                }


public int Divide(int dividend, int divisor)
        {
            if (divisor == 1) return dividend;
            if (divisor == -1)
            {
                if (dividend == int.MinValue)
                {
                    return int.MaxValue;
                }
                else
                    return -dividend;
            }
            int flag = (divisor > 0 && dividend < 0 || divisor < 0 && dividend > 0) ? -1 : 1;
            int res = 0;
            double newdividend = Math.Abs((double)dividend);
            double newdivisor = Math.Abs((double)divisor);
            while (newdividend >= newdivisor)
            {
                double tempDivisor = newdivisor;
                int count = 1;
                while (tempDivisor <= newdividend)
                {
                    newdividend -= tempDivisor;
                    res += count;
                    count++;
                    tempDivisor = newdivisor * count;
                }
            }
            return res * flag;
        }
