给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用一次。

说明：

所有数字（包括目标数）都是正整数。
解集不能包含重复的组合。 
示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
所求解集为:
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]



IList<IList<int>> res_CombinationSum2 = new List<IList<int>>();
        //(中等)四十. 组合总和 II
        public IList<IList<int>> CombinationSum2(int[] candidates, int target)
        {
            Array.Sort(candidates);

            List<int> newList = new List<int>();
            ReCursion_CombinationSum2(candidates, target, 0, newList);

            return res_CombinationSum2;
        }

        private void ReCursion_CombinationSum2(int[] candidates, int target, int index, List<int> newList)
        {
            if(target==0)
            {
                res_CombinationSum2.Add(newList);
                return;
            }

            
            for (int i = index; i < candidates.Length && candidates[i]<=target; i++)
            {
            //去重
                if (i>index && candidates[i]==candidates[i-1])
                {
                    continue;
                }
                List<int> temp = new List<int>(newList);

                temp.Add(candidates[i]);
                ReCursion_CombinationSum2(candidates, target - candidates[i], i+1, temp);
            }
        }
