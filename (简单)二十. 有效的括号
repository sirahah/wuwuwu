给定一个只包括 '('，')'，'{'，'}'，'['，']' 的字符串，判断字符串是否有效。

有效字符串需满足：

左括号必须用相同类型的右括号闭合。
左括号必须以正确的顺序闭合。
注意空字符串可被认为是有效字符串。

示例 1:

输入: "()"
输出: true
示例 2:

输入: "()[]{}"
输出: true
示例 3:

输入: "(]"
输出: false


解法1.  一般的方法
        public static bool IsValid(string s)
        {
            Dictionary<char, char> dic = new Dictionary<char, char>();
            dic.Add(')', '(');
            dic.Add(']', '[');
            dic.Add('}', '{');

            for (int i = 0; i < s.Length; i++)
            {
                if (dic.ContainsKey(s[i]))
                {
                    try
                    {
                        if (s[i - 1] == dic[s[i]])
                        {
                            s = s.Remove(i - 1, 2);
                            i -= 2;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    catch (Exception)
                    {
                        return false;
                    }
                }
            }

            return s.Length == 0;
      }
      
      
      
解法2.  用栈  (入栈,出栈   后进先出)

public static bool IsValid(string s)
        {
            if (s.Length == 0) return true;
            if (s.Length % 2 == 1 || s[0] == ')' || s[0] == ']' || s[0] == '}') return false;
            Stack<char> stack = new Stack<char>();
            foreach (char item in s)
            {
                if (item == '(' || item == '[' || item == '{')
                {
                    stack.Push(item);
                }
                else if (item == ')')
                {
                    if (stack.Pop() != '(') return false;
                }
                else if (item == ']')
                {
                    if (stack.Pop() != '[') return false;
                }
                else if (item == '}')
                {
                    if (stack.Pop() != '{') return false;
                }
            }

            return stack.Count == 0;
    }
