给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。

如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。

您可以假设除了数字 0 之外，这两个数都不会以 0 开头。

示例：

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

public ListNode AddTwoNumbers(ListNode l1, ListNode l2)
        {
            ListNode result = new ListNode(-1);
            ListNode curr = result;
            int more = 0;
            int temp;
            while (l1 != null || l2 != null)
            {
                temp = (l1?.val ?? 0) + (l2?.val ?? 0) + more;
                curr.next = new ListNode(temp % 10);
                curr = curr.next;
                more = (temp) / 10;
                l1 = l1?.next;
                l2 = l2?.next;
            }
            if (more > 0)
            {
                curr.next = new ListNode(more);
                curr = curr.next;
            }

            return result.next;
        }
        
        
 两个倒序链表相加    依次相加   
 注意:两数相加可能超过10,需要用变量存储下
