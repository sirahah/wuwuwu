假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。

示例 1:

输入: "42"
输出: 42
示例 2:

输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
示例 3:

输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
示例 4:

输入: "words and 987"
输出: 0
解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
     因此无法执行有效的转换。
示例 5:

输入: "-91283472332"
输出: -2147483648
解释: 数字 "-91283472332" 超过 32 位有符号整数范围。 
     因此返回 INT_MIN (−231) 




这里偷懒 利用的正则表达式

public static int MyAtoi(string str)
        {
            /*
             *       ^：匹配字符串开头
                    [\+\-]：代表一个+字符或-字符
                    ?：前面一个字符可有可无
                    \d：一个数字
                    +：前面一个字符的一个或多个
                    \D：一个非数字字符
                    *：前面一个字符的0个或多个
                    
             */
            var re = System.Text.RegularExpressions.Regex.Matches(str.Trim(), @"^[\+\-]?\d+");
            Double ans = re.Count == 0 ? 0 : System.Convert.ToDouble(re[0].Value);
            if (ans > int.MaxValue)
            {
                return int.MaxValue;
            }
            else if (ans < int.MinValue)
            {
                return int.MinValue;
            }
            else
                return (int)ans;

            //Math.Max(Math.min(int(*re.findall('^[\+\-]?\d+', str.lstrip())), 2 * *31 - 1), -2 * *31)
        }
