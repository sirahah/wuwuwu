给定一个只包含 '(' 和 ')' 的字符串，找出最长的包含有效括号的子串的长度。

示例 1:

输入: "(()"
输出: 2
解释: 最长有效括号子串为 "()"
示例 2:

输入: ")()())"
输出: 4
解释: 最长有效括号子串为 "()()"



解法1.  暴力解法 (特殊的超长例子会超时)
        public bool isValid(String s)
        {
            Stack<char> stack = new Stack<char>();
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == '(')
                {
                    stack.Push('(');
                }
                else if (stack.Count != 0 && stack.Peek() == '(')
                {
                    stack.Pop();
                }
                else
                {
                    return false;
                }
            }
            return stack.Count == 0;
        }
        public int LongestValidParentheses(String s)
        {
            int maxlen = 0;
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == ')') continue;
                for (int j = i + 2; j <= s.Length; j += 2)
                {
                    if (isValid(s.Substring(i, j - i)))
                    {
                        maxlen = Math.Max(maxlen, j - i);
                    }
                }
            }
            return maxlen;
        }
        
        
        
        
解法2. 动态规划
                     (   )  )   (  (  )  )
                     0   2  0   0  0  2  4

        public int LongestValidParentheses(String s)
        {
            int max = 0;
            int[] dp = new int[s.Length];
            for (int i = 1; i < s.Length; i++)
            {
                if (s[i] == ')')
                {
                    if (s[i - 1] == '(')
                    {
                        dp[i] = (i >= 2 ? dp[i - 2] : 0) + 2;
                    }
                    else if (i - dp[i - 1] > 0 && s[i - dp[i - 1] - 1] == '(')
                    {
                        dp[i] = dp[i - 1] + ((i - dp[i - 1]) >= 2 ? dp[i - dp[i - 1] - 2] : 0) + 2;
                    }
                    max = Math.Max(max, dp[i]);
                }
            }
            return max;
        }
        
        
 解法3.  栈 (存入"()"对应的下标)
         //    //    (   )  )   (  (  )  )
        //    //     0   1  2   3  4  5  6
 先在栈底存个"-1"
 
 
         public int LongestValidParentheses(String s)
        {
            //  6-3 + 1  =4
            int maxans = 0;
            Stack<int> stack = new Stack<int>();
            stack.Push(-1);
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == '(')
                {
                    stack.Push(i);
                }
                else
                {
                    stack.Pop();
                    if (stack.Count == 0)
                    {
                        stack.Push(i);
                    }
                    else
                    {
                        maxans = Math.Max(maxans, i - stack.Peek());
                    }
                }
            }
            return maxans;
        }
 
 
 解法4. 经历两次遍历
        //从左到右  从右到左     
        //记录"(" 与 ")"数量相同时的长度
        //当右数大于左数  两数清0 ;
        //两次遍历是必须的   例如"(()" 从左到右得到的是0
        
        
        
        public int LongestValidParentheses(String s)
        {
            int max = 0;

            int left = 0;
            int right = 0;
            for (int i = 0; i < s.Length; i++)
            {
                if (s[i] == '(')
                {
                    left++;
                }
                else
                {
                    right++;
                }
                if (right > left)
                {
                    left = 0;
                    right = 0;
                }
                else if (left == right)
                {
                    max = max > left * 2 ? max : left * 2;
                }
            }

            left = 0;
            right = 0;
            for (int i = s.Length - 1; i >= 0; i--)
            {
                if (s[i] == '(')
                {
                    left++;
                }
                else
                {
                    right++;
                }
                if (right < left)
                {
                    left = right = 0;
                }
                else if (left == right)
                {
                    max = max > left * 2 ? max : left * 2;
                }
            }

            return max;
        }
